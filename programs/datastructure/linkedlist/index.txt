P1. How do you find the middle element of a linked list?
P2. How do detect if the LL is odd or even?
P3. Write a function to find kth element from a singly linked List from the end(not from the head) in one pass.
P4. Inserting element in Sorted Order
P5. Delete all matching elements in the linked list
P6. Program to remove duplicates from a sorted linked list
P7. Suppose only a pointer to a particular node is given, and we need to delete that node
P8. Append the last n nodes of a linked list to the beginning of the list eg: 1->2->3->4->5->6 if n=2 5->6->1->2->3->4
P9. Given LL, 1-2-3-4-5-6,write a fun to remove all even nodes and a function remove all old nodes
P10. Printing the elements in reverse order by recursion
P11. *Reversing Linked List (Try using minimum pointers, at the most 2 extra pointers)
P12. *Reverse a linked list by recursion
P13. Reverse doubly linked list without using any extra space
P14. With a linked list data structure, find if a given string is palindrome or not.(Coolest Logic used by me)
P15. **Given LL is 1-2-3-4-5, the out put should be 2-1-4-3-5 etc.
P16. **Detect a loop in LL, if present, find the point where loop starts, find the length of the loop and also remove the loop.
P17. *Given two LL, find the point of intersection. Only their heads are known.
P18. Given a singly linked list which may or may not contain loop and loop may or may not start from the head node. Count the number of elements in the linked list.
P19. Combine two LL so that the resultant list has alternate elements from the two list
P20. Input: 1->9->3->8->5->7->7 Odd nodes in increasing order and even nodes are in decreasing order. Output should be 1->3->5->7->7->8->9
P21. *Linked List containing only three integers 1,2,3. Sort the list without exchanging the values. Input: 1->3->2->1->2->3->2->1->1 Output: 1->1->1->1->2->2->2->3->3
P22. Perform the above ops for Doubly Linked List
P23. Given a Circular LL (or LL), simply write a function, that will return "true" if there are any duplicate elements or else false. (making the time complexity as low as possible)
P24. Remove duplicates from an unsorted linked list.
P25. Given two integers M and N, retain M and delete next N, continue this process
P26. *Given two sorted linked lists, write a function to merge them into one
P27. **Add two linked list of variable lengths.
P28. **Making a copy of Malformed Linked List (http://www.careercup.com/question?id=9304676)
P29. Sorting a linked list
P30. Given number k, for Single linked list, skip k nodes and then reverse k nodes, till the end.
P31. Tortoise Hare problem (Floyd's Alogrithm) proof (http://www.quora.com/How-does-Floyds-cycle-finding-algorithm-work Check comment)
P32. *Given number k, for Singly Linked List, reverse every k elements.
P33. Josephus Circle: N people arrange themselves in circle. They eliminate every Mth people. The last one standing is the leader. Find the leader.
